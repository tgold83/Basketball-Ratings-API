// <auto-generated />
using BasketballRatings.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BasketballRatings.Migrations
{
    [DbContext(typeof(BasketballRatingsContext))]
    partial class BasketballRatingsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BasketballRatings.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Team")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            FirstName = "LeBron",
                            LastName = "James",
                            Team = "LAL"
                        },
                        new
                        {
                            PlayerId = 2,
                            FirstName = "Giannis",
                            LastName = "Antetokoumpo",
                            Team = "MIL"
                        },
                        new
                        {
                            PlayerId = 3,
                            FirstName = "Stephen",
                            LastName = "Curry",
                            Team = "GSW"
                        },
                        new
                        {
                            PlayerId = 4,
                            FirstName = "Kevin",
                            LastName = "Durant",
                            Team = "BKN"
                        },
                        new
                        {
                            PlayerId = 5,
                            FirstName = "Nikola",
                            LastName = "Jokic",
                            Team = "DEN"
                        },
                        new
                        {
                            PlayerId = 6,
                            FirstName = "Joel",
                            LastName = "Embiid",
                            Team = "PHI"
                        },
                        new
                        {
                            PlayerId = 7,
                            FirstName = "Luka",
                            LastName = "Doncic",
                            Team = "DAL"
                        },
                        new
                        {
                            PlayerId = 8,
                            FirstName = "Kawhi",
                            LastName = "Leonard",
                            Team = "LAC"
                        },
                        new
                        {
                            PlayerId = 9,
                            FirstName = "Ja",
                            LastName = "Morant",
                            Team = "MEM"
                        },
                        new
                        {
                            PlayerId = 10,
                            FirstName = "Jason",
                            LastName = "Tatum",
                            Team = "BOS"
                        });
                });

            modelBuilder.Entity("BasketballRatings.Models.PlayerPosition", b =>
                {
                    b.Property<int>("PlayerPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("PlayerPositionId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PositionId");

                    b.ToTable("PlayerPosition");

                    b.HasData(
                        new
                        {
                            PlayerPositionId = 1,
                            PlayerId = 1,
                            PositionId = 1
                        },
                        new
                        {
                            PlayerPositionId = 2,
                            PlayerId = 1,
                            PositionId = 3
                        },
                        new
                        {
                            PlayerPositionId = 3,
                            PlayerId = 2,
                            PositionId = 4
                        },
                        new
                        {
                            PlayerPositionId = 4,
                            PlayerId = 2,
                            PositionId = 5
                        },
                        new
                        {
                            PlayerPositionId = 5,
                            PlayerId = 3,
                            PositionId = 1
                        },
                        new
                        {
                            PlayerPositionId = 6,
                            PlayerId = 3,
                            PositionId = 2
                        },
                        new
                        {
                            PlayerPositionId = 7,
                            PlayerId = 4,
                            PositionId = 3
                        },
                        new
                        {
                            PlayerPositionId = 8,
                            PlayerId = 4,
                            PositionId = 4
                        },
                        new
                        {
                            PlayerPositionId = 9,
                            PlayerId = 5,
                            PositionId = 5
                        },
                        new
                        {
                            PlayerPositionId = 10,
                            PlayerId = 6,
                            PositionId = 5
                        },
                        new
                        {
                            PlayerPositionId = 11,
                            PlayerId = 7,
                            PositionId = 1
                        },
                        new
                        {
                            PlayerPositionId = 12,
                            PlayerId = 7,
                            PositionId = 3
                        },
                        new
                        {
                            PlayerPositionId = 13,
                            PlayerId = 8,
                            PositionId = 3
                        },
                        new
                        {
                            PlayerPositionId = 14,
                            PlayerId = 8,
                            PositionId = 4
                        },
                        new
                        {
                            PlayerPositionId = 15,
                            PlayerId = 9,
                            PositionId = 1
                        },
                        new
                        {
                            PlayerPositionId = 16,
                            PlayerId = 10,
                            PositionId = 3
                        },
                        new
                        {
                            PlayerPositionId = 17,
                            PlayerId = 10,
                            PositionId = 4
                        });
                });

            modelBuilder.Entity("BasketballRatings.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PositionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            PositionName = "PG"
                        },
                        new
                        {
                            PositionId = 2,
                            PositionName = "SG"
                        },
                        new
                        {
                            PositionId = 3,
                            PositionName = "SF"
                        },
                        new
                        {
                            PositionId = 4,
                            PositionName = "PF"
                        },
                        new
                        {
                            PositionId = 5,
                            PositionName = "C"
                        });
                });

            modelBuilder.Entity("BasketballRatings.Models.PlayerPosition", b =>
                {
                    b.HasOne("BasketballRatings.Models.Player", "Player")
                        .WithMany("JoinEntities")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballRatings.Models.Position", "Position")
                        .WithMany("JoinEntities")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("BasketballRatings.Models.Player", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("BasketballRatings.Models.Position", b =>
                {
                    b.Navigation("JoinEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
